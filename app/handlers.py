import asyncio
import datetime
from zoneinfo import ZoneInfo

import aiohttp
import structlog
from bs4 import BeautifulSoup
from telegram import Update, Bot, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from app.constants import DATE_FORMAT, EXAMPLE_ROUTE
from app.settings import settings
from app.task_manager import task_manager

logger = structlog.getLogger(__name__)


def get_minsk_date() -> datetime.date:
    return (datetime.datetime.now(ZoneInfo("Europe/Minsk"))).date()


async def validate_time_input(
    date_str: str, time_str: str, bot: Bot, chat_id: int
) -> bool:
    """Validate if the input time is in the future."""
    try:
        input_time = datetime.time.fromisoformat(time_str)
        input_date = datetime.datetime.strptime(date_str, DATE_FORMAT).date()
    except ValueError:
        example = f"{EXAMPLE_ROUTE} {get_minsk_date().strftime(DATE_FORMAT)} 07:44"
        await bot.send_message(
            chat_id=chat_id,
            text="‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
            f"üìù <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>\n"
            f"<code>{example}</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(
                [["–û—Ç–º–µ–Ω–∞"]],
                resize_keyboard=True,
                one_time_keyboard=True,
            ),
        )
        logger.bind(date_str=date_str, time_str=time_str).debug(
            "Wrong date or time format"
        )
        return False

    minsk_now = datetime.datetime.now(ZoneInfo("Europe/Minsk"))
    current_date = minsk_now.date()
    current_time = minsk_now.time()
    if (
        len(time_str) != 5
        or input_date < current_date
        or (input_date == current_date and input_time < current_time)
    ):
        example = f"{EXAMPLE_ROUTE} {get_minsk_date().strftime(DATE_FORMAT)} 07:44"
        await bot.send_message(
            chat_id=chat_id,
            text="‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞</b>\n\n"
            "‚ö° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è\n"
            "‚Ä¢ –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–æ—à–ª–æ–º\n"
            f"üìù <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>\n"
            f"<code>{example}</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(
                [["–û—Ç–º–µ–Ω–∞"]],
                resize_keyboard=True,
                one_time_keyboard=True,
            ),
        )
        logger.bind(input_date=input_date, input_time=input_time).debug(
            "Time is in the past"
        )
        return False
    return True


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a welcome message with instructions."""
    if not update.message or not update.effective_user:
        return
    user = update.effective_user
    example = f"{EXAMPLE_ROUTE} {get_minsk_date().strftime(DATE_FORMAT)} 07:44"
    message = (
        "üöÇ <b>–ü–æ–∏—Å–∫ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤</b>\n\n"
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
        "<code>–û—Ç–∫—É–¥–∞  –ö—É–¥–∞  –î–∞—Ç–∞  –í—Ä–µ–º—è</code>\n\n"
        "üìÖ <b>–î–∞—Ç–∞:</b> –ì–ì–ì–ì-–ú–ú-–î–î\n"
        "‚è∞ <b>–í—Ä–µ–º—è:</b> –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)\n\n"
        "üîπ <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        f"<code>{example}</code>\n\n"
        f"–ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –¥–æ {settings.max_concurrent_searches} –±–∏–ª–µ—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n"
    )
    await update.message.reply_html(message)
    logger.bind(user_id=user.id, username=user.username).info(
        f"User {user.first_name} {user.last_name} started bot"
    )


async def handle_invalid_input(update: Update, example: str) -> None:
    """Handle cases with invalid input format."""
    error_message = (
        "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n"
        f"<code>{update.message.text}</code>\n\n"  # type: ignore
        "üìù <b>–¢—Ä–µ–±—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:</b>\n"
        "<code>–û—Ç–∫—É–¥–∞  –ö—É–¥–∞  –î–∞—Ç–∞  –í—Ä–µ–º—è</code>\n\n"
        "üîπ <b>–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:</b>\n"
        f"<code>{example}</code>\n\n"
        "üìÖ –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ì–ì–ì–ì-–ú–ú-–î–î</b>\n"
        "‚è∞ –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ß–ß:–ú–ú</b>"
    )
    await update.message.reply_html(  # type: ignore
        error_message,
        reply_markup=ReplyKeyboardMarkup(
            [["–û—Ç–º–µ–Ω–∞"]],
            resize_keyboard=True,
            one_time_keyboard=True,
        ),
    )
    logger.debug("Wrong ticket params", params=update.message.text.split())  # type: ignore


async def create_search_task(
    bot: Bot,
    params: list[str],
    chat_id: int,
    user_data: dict,  # type: ignore
) -> bool:
    """Create and manage search tasks with concurrency limits."""
    task = asyncio.create_task(start_ticket_checking(bot, params, chat_id))
    task_manager.add_task(chat_id=chat_id, task=task)

    for i in range(1, settings.max_concurrent_searches + 1):
        task_key = f"search_task_{i}"
        if task_key not in user_data or user_data[task_key].done():
            user_data[task_key] = task
            return True

    # Cancel a task if limit reached
    task.cancel()
    try:
        await task
    except asyncio.CancelledError:
        pass
    return False


async def enter_ticket_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Process user input for ticket search."""
    if not update.message or not update.effective_user or not update.message.text:
        return None
    if context.user_data is None:
        context.user_data = {}

    params = update.message.text.split()
    if len(params) != 4:
        example = f"{EXAMPLE_ROUTE} {get_minsk_date().strftime(DATE_FORMAT)} 07:44"
        await handle_invalid_input(update, example)
        return None

    task_created = await create_search_task(
        context.bot, params, update.message.chat_id, context.user_data
    )

    if not task_created:
        await update.message.reply_text(
            "‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤</b>\n\n"
            f"–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ {settings.max_concurrent_searches} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤.\n",
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(
                [["–û—Ç–º–µ–Ω–∞"]],
                resize_keyboard=True,
                one_time_keyboard=True,
            ),
        )
    return None


async def validate_rzd_response(
    params: list[str], soup: BeautifulSoup, bot: Bot, chat_id: int
) -> bool:
    """Validate the response from the RZD website."""
    error_elements = {
        "error_content": soup.find("div", class_="error_content"),
        "error_title": soup.find("div", class_="error_title"),
    }

    if any(error_elements.values()):
        error_parts = [el.text.strip() for el in error_elements.values() if el]
        error_message = " | ".join(error_parts)
        example = f"{EXAMPLE_ROUTE} {get_minsk_date().strftime(DATE_FORMAT)} 07:44"

        await bot.send_message(
            chat_id=chat_id,
            text="‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞</b>\n\n"
            "‚ö° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã —Å—Ç–∞–Ω—Ü–∏–∏\n"
            "‚Ä¢ –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏\n"
            "‚Ä¢ –î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –ø—Ä–æ—à–ª–æ–º\n\n"
            f"üîç <b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:</b>\n"
            f"{error_message}\n\n"
            f"üìù <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>\n"
            f"<code>{example}</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(
                [["–û—Ç–º–µ–Ω–∞"]],
                resize_keyboard=True,
                one_time_keyboard=True,
            ),
        )
        logger.debug("RZD request error", params=params, error=error_message)
        return False

    # Check if train time exists
    if not soup.find("div", class_="sch-table__time train-from-time", string=params[3]):
        example = f"{EXAMPLE_ROUTE} {get_minsk_date().strftime(DATE_FORMAT)} 07:44"

        await bot.send_message(
            chat_id=chat_id,
            text="üö´ <b>–ü–æ–µ–∑–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            f"–í—Ä–µ–º—è <b>{params[3]}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.\n\n"
            "‚Ñπ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</b>\n"
            "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã —Å—Ç–∞–Ω—Ü–∏–∏\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–π—Å–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú, 24-—á–∞—Å–æ–≤–æ–π)\n\n"
            f"üîπ <b>–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:</b>\n"
            f"<code>{example}</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(
                [["–û—Ç–º–µ–Ω–∞"]],
                resize_keyboard=True,
                one_time_keyboard=True,
            ),
        )
        logger.debug("Departure time not found", params=params, time=params[3])
        return False

    return True


async def start_ticket_checking(bot: Bot, params: list[str], chat_id: int) -> None:
    """Main function to check ticket availability periodically."""
    url = (
        f"https://pass.rw.by/ru/route/?from={params[0]}&to={params[1]}&date={params[2]}"
    )
    async with aiohttp.ClientSession() as session:
        try:
            logger.debug("Validating ticket params", params=params, chat_id=chat_id)
            if not await validate_time_input(
                date_str=params[2], time_str=params[3], bot=bot, chat_id=chat_id
            ):
                return None

            response = await session.get(url)
            if response.status != 200:
                raise Exception(f"HTTP error {response.status}")

            soup = BeautifulSoup(await response.text(), "html.parser")
            if not await validate_rzd_response(params, soup, bot, chat_id):
                return None

            await bot.send_message(
                chat_id=chat_id,
                text=f"üîç <b>–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤</b>\n\n"
                f"üöÇ <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {params[0]} ‚Üí {params[1]}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {params[2]}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {params[3]}\n\n"
                "–Ø —Å–æ–æ–±—â—É –≤–∞–º —Å—Ä–∞–∑—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±–∏–ª–µ—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∂–µ.\n\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>\n"
                "‚ûï –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ <b>–ï—â—ë –æ–¥–∏–Ω –±–∏–ª–µ—Ç</b>",
                parse_mode=ParseMode.HTML,
                reply_markup=ReplyKeyboardMarkup(
                    [["–û—Ç–º–µ–Ω–∞", "–ï—â—ë –æ–¥–∏–Ω –±–∏–ª–µ—Ç"]],
                    resize_keyboard=True,
                    one_time_keyboard=True,
                ),
            )

            await monitor_ticket_availability(session, url, params, bot, chat_id)
            return None
        except Exception as e:
            logger.error(f"Ticket checking {e}")
            await bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∏–ª–µ—Ç–æ–≤ {params[0]} ‚Üí {params[1]} "
                f"–Ω–∞ {params[2]} {params[3]}, –≤–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω",
            )
            return None


async def monitor_ticket_availability(
    session: aiohttp.ClientSession, url: str, params: list[str], bot: Bot, chat_id: int
) -> None:
    """Periodically check ticket availability."""
    while True:
        try:
            response = await session.get(url)
            if response.status != 200:
                await asyncio.sleep(settings.retry_time)
                continue

            soup = BeautifulSoup(await response.text(), "html.parser")
            target_block = soup.find(
                "div",
                class_="sch-table__time train-from-time",
                string=params[3],
            )

            if not target_block or (
                (
                    train_block := target_block.find_parent(
                        "div", class_="sch-table__row"
                    )
                )
                is None
            ):
                logger.error(
                    "Target block not found, wrong train parameters", params=params
                )
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∏–ª–µ—Ç–æ–≤ {params[0]} ‚Üí {params[1]} "
                    f"–Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã —Å—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –≤—Ä–µ–º—è",
                    reply_markup=ReplyKeyboardMarkup(
                        [["–û—Ç–º–µ–Ω–∞"]],
                        resize_keyboard=True,
                        one_time_keyboard=True,
                    ),
                )
                return None

            ticket_available = (
                train_block.get("data-ticket_selling_allowed", "").lower() == "true"  # type: ignore
            )

            if ticket_available:
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"‚úÖ –ë–∏–ª–µ—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ –ø—Ä–æ–¥–∞–∂–µ! {params[0]} ‚Üí {params[1]} {params[2]} {params[3]}",
                    reply_markup=ReplyKeyboardMarkup(
                        [["–û—Ç–º–µ–Ω–∞"]],
                        resize_keyboard=True,
                        one_time_keyboard=True,
                    ),
                )
                logger.info("Tickets found", params=params, chat_id=chat_id)
            else:
                logger.debug("No available tickets", params=params, chat_id=chat_id)
            await asyncio.sleep(settings.retry_time)

        except Exception as e:
            logger.error("Monitoring error", error=str(e))


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Cancel active search tasks."""
    if (
        not update
        or not update.message
        or not update.message.text
        or update.message.text.strip().lower() != "–æ—Ç–º–µ–Ω–∞"
    ):
        return
    if not context.user_data:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return

    cancelled_count = 0
    for i in range(1, settings.max_concurrent_searches + 1):
        task_key = f"search_task_{i}"
        if task := context.user_data.get(task_key):
            if not task.done():
                task.cancel()
                try:
                    await task
                    cancelled_count += 1
                except asyncio.CancelledError:
                    cancelled_count += 1
                except Exception as e:
                    logger.error(
                        "Task cancellation error", task_key=task_key, error=str(e)
                    )
            context.user_data.pop(task_key, None)

    example = f"{EXAMPLE_ROUTE} {get_minsk_date().strftime(DATE_FORMAT)} 07:44"
    await update.message.reply_text(
        f"‚ùå <b>–û—Ç–º–µ–Ω–µ–Ω–æ {cancelled_count} –ø–æ–∏—Å–∫(–∞)</b>\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫, –≤–≤–µ–¥–∏—Ç–µ:\n"
        "<code>–û—Ç–∫—É–¥–∞ –ö—É–¥–∞ –î–∞—Ç–∞ –í—Ä–µ–º—è</code>\n\n"
        "üîπ <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        f"<code>{example}</code>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove(),
    )


async def add_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle request to add another ticket search."""
    if (
        not update
        or not update.effective_user
        or not update.message
        or not update.message.text
        or update.message.text.strip().lower() != "–µ—â—ë –æ–¥–∏–Ω –±–∏–ª–µ—Ç"
    ):
        return
    example = f"{EXAMPLE_ROUTE} {get_minsk_date().strftime(DATE_FORMAT)} 07:44"
    await update.message.reply_text(
        f"üìù <b>–õ–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {settings.max_concurrent_searches}</b>\n"
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
        "<code>–û—Ç–∫—É–¥–∞  –ö—É–¥–∞  –î–∞—Ç–∞  –í—Ä–µ–º—è</code>\n\n"
        "üìÖ <b>–î–∞—Ç–∞:</b> –ì–ì–ì–ì-–ú–ú-–î–î\n"
        "‚è∞ <b>–í—Ä–µ–º—è:</b> –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)\n\n"
        "üîπ <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        f"<code>{example}</code>\n\n",
        parse_mode=ParseMode.HTML,
    )
    logger.debug(f"User {update.effective_user.username} wants to add another ticket")
