import asyncio

import aiohttp
import structlog
from bs4 import BeautifulSoup
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from app.constants import DATE_FORMAT, EXAMPLE_ROUTE
from app.db.ticket_request_repo import TicketRequestRepository
from app.settings import settings
from app.utils import (
    get_minsk_date,
    make_get_request,
    validate_time_input,
    validate_rzd_response,
    handle_invalid_input,
)

logger = structlog.get_logger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a welcome message with instructions."""
    if not update.message or not update.effective_user:
        return
    user = update.effective_user
    example = f"{EXAMPLE_ROUTE} {get_minsk_date().strftime(DATE_FORMAT)} 07:44"
    message = (
        "üöÇ <b>–ü–æ–∏—Å–∫ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤</b>\n\n"
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
        "<code>–û—Ç–∫—É–¥–∞  –ö—É–¥–∞  –î–∞—Ç–∞  –í—Ä–µ–º—è</code>\n\n"
        "üìÖ <b>–î–∞—Ç–∞:</b> –ì–ì–ì–ì-–ú–ú-–î–î\n"
        "‚è∞ <b>–í—Ä–µ–º—è:</b> –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)\n\n"
        "üîπ <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        f"<code>{example}</code>\n\n"
    )
    await update.message.reply_html(message)
    logger.bind(
        user_id=user.id, username=user.username, chat_id=update.message.chat_id
    ).info(f"User {user.first_name} {user.last_name} started bot")


async def enter_ticket_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Process user input for ticket search."""
    if not update.message or not update.effective_user or not update.message.text:
        return None

    params = update.message.text.split()
    if len(params) != 4:
        example = f"{EXAMPLE_ROUTE} {get_minsk_date().strftime(DATE_FORMAT)} 07:44"
        await handle_invalid_input(update, example)
        return None

    if not await validate_time_input(
        date_str=params[2],
        time_str=params[3],
        bot=context.bot,
        chat_id=update.message.chat_id,
    ):
        return None

    async with aiohttp.ClientSession() as session:
        try:
            url = f"https://pass.rw.by/ru/route/?from={params[0]}&to={params[1]}&date={params[2]}"
            response = await make_get_request(url=url, session=session)
            if response.status != 200:
                raise Exception(f"HTTP error {response.status}")

            soup = BeautifulSoup(await response.text(), "html.parser")
            if not await validate_rzd_response(
                params, soup, context.bot, update.message.chat_id
            ):
                return None

            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"üîç <b>–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤</b>\n\n"
                f"üöÇ <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {params[0]} ‚Üí {params[1]}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {params[2]}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {params[3]}\n\n"
                "–Ø —Å–æ–æ–±—â—É –≤–∞–º —Å—Ä–∞–∑—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±–∏–ª–µ—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∂–µ.\n\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>\n"
                "‚ûï –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ <b>–ï—â—ë –æ–¥–∏–Ω –±–∏–ª–µ—Ç</b>",
                parse_mode=ParseMode.HTML,
                reply_markup=ReplyKeyboardMarkup(
                    [["–û—Ç–º–µ–Ω–∞", "–ï—â—ë –æ–¥–∏–Ω –±–∏–ª–µ—Ç"]],
                    resize_keyboard=True,
                    one_time_keyboard=True,
                ),
            )

        except (aiohttp.ClientError, asyncio.TimeoutError) as e:
            logger.bind(url=url, error=str(e), chat_id=update.message.chat_id).error(
                f"Ticket checking failed after retries: {settings.retry_attempts}"
            )
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã {params[0]} ‚Üí {params[1]} "
                f"–Ω–∞ {params[2]} {params[3]}. –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            )
            return None
        except Exception as e:
            logger.bind(url=url, error=str(e), chat_id=update.message.chat_id).error(
                "Ticket checking error"
            )
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∏–ª–µ—Ç–æ–≤ {params[0]} ‚Üí {params[1]} "
                f"–Ω–∞ {params[2]} {params[3]}"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            )
            return None

    ticket_repo: TicketRequestRepository = context.bot_data["ticket_repo"]
    ticket_repo.add_request(
        departure=params[0],
        arrival=params[1],
        date=params[2],
        time=params[3],
        chat_id=update.message.chat_id,
        user_id=update.effective_user.id,
        user_name=update.effective_user.username,  # type: ignore
    )
    return None


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Cancel active search tasks."""
    if (
        not update
        or not update.message
        or not update.message.text
        or update.message.text.strip().lower() != "–æ—Ç–º–µ–Ω–∞"
    ):
        return

    ticket_repo: TicketRequestRepository = context.bot_data["ticket_repo"]
    result = ticket_repo.set_request_inactive_by_chat_id(chat_id=update.message.chat_id)
    example = f"{EXAMPLE_ROUTE} {get_minsk_date().strftime(DATE_FORMAT)} 07:44"
    await update.message.reply_text(
        f"‚ùå <b>–û—Ç–º–µ–Ω–µ–Ω–æ {result} –ø–æ–∏—Å–∫(–∞)</b>\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫, –≤–≤–µ–¥–∏—Ç–µ:\n"
        "<code>–û—Ç–∫—É–¥–∞ –ö—É–¥–∞ –î–∞—Ç–∞ –í—Ä–µ–º—è</code>\n\n"
        "üîπ <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        f"<code>{example}</code>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove(),
    )
    user = update.effective_user
    logger.bind(
        user_id=user.id,  # type: ignore
        username=user.username,  # type: ignore
        chat_id=update.message.chat_id,
    ).debug(
        f"User {user.first_name} {user.last_name} cancelled {result} tickets"  # type: ignore
    )


async def add_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle a request to add another ticket search."""
    if (
        not update
        or not update.effective_user
        or not update.message
        or not update.message.text
        or update.message.text.strip().lower() != "–µ—â—ë –æ–¥–∏–Ω –±–∏–ª–µ—Ç"
    ):
        return

    example = f"{EXAMPLE_ROUTE} {get_minsk_date().strftime(DATE_FORMAT)} 07:44"
    await update.message.reply_text(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
        "<code>–û—Ç–∫—É–¥–∞  –ö—É–¥–∞  –î–∞—Ç–∞  –í—Ä–µ–º—è</code>\n\n"
        "üìÖ <b>–î–∞—Ç–∞:</b> –ì–ì–ì–ì-–ú–ú-–î–î\n"
        "‚è∞ <b>–í—Ä–µ–º—è:</b> –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)\n\n"
        "üîπ <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        f"<code>{example}</code>\n\n",
        parse_mode=ParseMode.HTML,
    )
    user = update.effective_user
    logger.bind(
        user_id=user.id, username=user.username, chat_id=update.message.chat_id
    ).debug(f"User {user.first_name} {user.last_name} wants to add another ticket")
